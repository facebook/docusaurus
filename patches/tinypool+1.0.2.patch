diff --git a/node_modules/tinypool/dist/chunk-E2J7JLFN.js b/node_modules/tinypool/dist/chunk-E2J7JLFN.js
index 0e7508f..703f9b3 100644
--- a/node_modules/tinypool/dist/chunk-E2J7JLFN.js
+++ b/node_modules/tinypool/dist/chunk-E2J7JLFN.js
@@ -10,38 +10,71 @@ function getImportESM() {
   }
   return importESMCached;
 }
+
+const delay = () => new Promise(resolve => setTimeout(resolve,10))
+
+
 var handlerCache = /* @__PURE__ */ new Map();
 async function getHandler(filename, name) {
   let handler = handlerCache.get(`${filename}/${name}`);
   if (handler !== void 0) {
+    console.log("Tinypool - getHandler - cache HIT",`${filename}/${name}`,typeof handler);
     return handler;
   }
   try {
+    console.log("Tinypool - getHandler - not cached",{filename,name});
     const handlerModule = await import(filename);
+    console.log("Tinypool - handlerModule type",typeof handlerModule);
+    await delay();
+    console.log("Tinypool - handlerModule",handlerModule);
     handler = typeof handlerModule.default !== "function" && handlerModule.default || handlerModule;
+    console.log("Tinypool - handler type",typeof handler);
+    await delay();
+    console.log("Tinypool - handler",handler);
     if (typeof handler !== "function") {
       handler = await handler[name];
     }
-  } catch {
+  } catch (e) {
+    await delay();
+    console.log("Tinypool - swallowed error?",e);
+    await delay();
   }
   if (typeof handler !== "function") {
+    await delay();
+    console.log("Tinypool - handler not function");
+    await delay();
+
     handler = await getImportESM()(pathToFileURL(filename).href);
+    await delay();
+
+    console.log("Tinypool - handler not function - handler",handler);
+    await delay();
+
     if (typeof handler !== "function") {
       handler = await handler[name];
+      console.log("Tinypool - handler not function - handler[name]",handler);
+      await delay();
     }
   }
   if (typeof handler !== "function") {
+    console.log("Tinypool - handler not function - return null",handler);
+    await delay();
     return null;
   }
   if (handlerCache.size > 1e3) {
     const [handler2] = handlerCache;
     const key = handler2[0];
+    console.log("Tinypool - handlerCache delete",{key,handler2});
+    await delay();
     handlerCache.delete(key);
   }
   handlerCache.set(`${filename}/${name}`, handler);
+  console.log("Tinypool - handlerCache set",`${filename}/${name}`, handler);
+  await delay();
   return handler;
 }
 function throwInNextTick(error) {
+  console.log("Tinypool - throwInNextTick error",error);
   process.nextTick(() => {
     throw error;
   });
diff --git a/node_modules/tinypool/dist/entry/worker.js b/node_modules/tinypool/dist/entry/worker.js
index 1a7796c..8bba187 100644
--- a/node_modules/tinypool/dist/entry/worker.js
+++ b/node_modules/tinypool/dist/entry/worker.js
@@ -65,8 +65,9 @@ function onMessage(port, sharedBuffer, message) {
     let transferList = [];
     try {
       const handler = await getHandler(filename, name);
+      console.log("Tinypool Worker - getHandler",{filename,name,handler})
       if (handler === null) {
-        throw new Error(`No handler function exported from ${filename}`);
+        throw new Error(`No handler function exported from ${filename}/${name}`);
       }
       let result = await handler(task);
       if (isMovable(result)) {
